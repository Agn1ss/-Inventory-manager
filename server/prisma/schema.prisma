generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id String  @id @default(cuid())
  refreshToken String 
  userId String @unique
  owner User @relation("UserToken", fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String   @unique
  password  String?
  isBlocked Boolean  @default(false)
  role      UserRole

  oauthAccounts UserOAuth[] 
  inventories   Inventory[] @relation("UserInventories")
  items         Item[]
  comments      Comment[]
  likes         Like[]
  editorsOf     InventoryEditor[]

  Token Token? @relation("UserToken")

}

enum UserRole {
  USER
  ADMIN
}

model UserOAuth {
  id            String   @id @default(cuid())
  provider      String
  providerId    String   
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
}

model Inventory {
  id                 String     @id @default(cuid())
  title              String     
  description        String?    @db.Text
  imageUrl           String?
  creatorId          String
  categoryId         String
  customIdTypeId     String
  isPublic           Boolean    @default(false)
  version            Int        @default(1)

  customString1State FieldState @default(NONE)
  customString1Name  String?
  customString1Description String?
  customString1Order Int?      

  customString2State FieldState @default(NONE)
  customString2Name  String?
  customString2Description String?
  customString2Order Int?      

  customString3State FieldState @default(NONE)
  customString3Name  String?
  customString3Description String?
  customString3Order Int?      

  customText1State   FieldState @default(NONE)
  customText1Name    String?
  customText1Description String?
  customText1Order   Int?      

  customText2State   FieldState @default(NONE)
  customText2Name    String?
  customText2Description String?
  customText2Order   Int?      

  customText3State   FieldState @default(NONE)
  customText3Name    String?
  customText3Description String?
  customText3Order   Int?      

  customInt1State    FieldState @default(NONE)
  customInt1Name     String?
  customInt1Description String?
  customInt1Order    Int?      

  customInt2State    FieldState @default(NONE)
  customInt2Name     String?
  customInt2Description String?
  customInt2Order    Int?      

  customInt3State    FieldState @default(NONE)
  customInt3Name     String?
  customInt3Description String?
  customInt3Order    Int?      

  customLink1State   FieldState @default(NONE)
  customLink1Name    String?
  customLink1Description String?
  customLink1Order   Int?      

  customLink2State   FieldState @default(NONE)
  customLink2Name    String?
  customLink2Description String?
  customLink2Order   Int?      

  customLink3State   FieldState @default(NONE)
  customLink3Name    String?
  customLink3Description String?
  customLink3Order   Int?      

  customBool1State   FieldState @default(NONE)
  customBool1Name    String?
  customBool1Description String?
  customBool1Order   Int?      

  customBool2State   FieldState @default(NONE)
  customBool2Name    String?
  customBool2Description String?
  customBool2Order   Int?      

  customBool3State   FieldState @default(NONE)
  customBool3Name    String?
  customBool3Description String?
  customBool3Order   Int?      

  tags         Tag[]           @relation("InventoryTags")
  comments     Comment[]
  items        Item[]
  editors      InventoryEditor[]
  creator      User            @relation("UserInventories", fields: [creatorId], references: [id], onDelete: Cascade)
  category     Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  customIdType CustomIdType    @relation(fields: [customIdTypeId], references: [id], onDelete: Cascade)

  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

}


enum FieldState {
  NONE
  NOT_VISIBLE
  VISIBLE
}

model InventoryEditor {
  id           String     @id @default(cuid())
  userId       String
  inventoryId  String

  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory    Inventory   @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([userId, inventoryId])
}

model Item {
  id          String   @id @default(cuid())
  inventoryId String
  creatorId   String
  customId    String?
  version     Int      @default(1)

  customString1  String?
  customString2  String?
  customString3  String?

  customText1    String? @db.Text
  customText2    String? @db.Text
  customText3    String? @db.Text

  customInt1     Int?
  customInt2     Int?
  customInt3     Int?

  customLink1    String?
  customLink2    String?
  customLink3    String?

  customBool1    Boolean?
  customBool2    Boolean?
  customBool3    Boolean?

  @@unique([inventoryId, customId])

  likes     Like[]
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  creator   User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Like {
  id     String @id @default(cuid())
  itemId String
  userId String  

  @@unique([itemId, userId])
  
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id  String   @id @default(cuid())
  name String  @unique

  Inventories Inventory[]
}

model Tag {
  id                 String     @id @default(cuid())
  name               String     @unique
  
  inventories        Inventory[] @relation("InventoryTags")
}

model Comment {
  id          String    @id @default(cuid())
  text        String    @db.Text
  inventoryId String
  creatorId   String
  createdAt    DateTime      @default(now())

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model CustomIdType {
  id           String        @id @default(cuid())
  fixedText    String?       @db.Text
  isTypeNotEmpty Boolean @default(false)
  randomType   RandomType?
  dateFormat   DateFormat?
  sequenceName Boolean       @default(false)
  sequenceCounter Int        @default(1)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  inventories  Inventory[]
}

enum RandomType {
  BIT_20      
  BIT_32      
  DIGITS_6     
  DIGITS_9
  GUID
}

enum DateFormat {
  YYYY
  YYYYMMDD
  YYYYMMDDHHmmss
  YYYY_MM_DD
  DDMMYYYY
}
